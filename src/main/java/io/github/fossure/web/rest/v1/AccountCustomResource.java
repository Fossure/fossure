package io.github.fossure.web.rest.v1;

import javax.validation.Valid;

import io.github.fossure.web.rest.errors.BadRequestAlertException;
import io.github.fossure.web.rest.errors.EmailAlreadyUsedException;
import io.github.fossure.web.rest.errors.InvalidPasswordException;
import io.github.fossure.web.rest.errors.LoginAlreadyUsedException;
import io.github.fossure.web.rest.vm.ManagedUserVM;
import io.github.fossure.domain.User;
import io.github.fossure.repository.UserCustomRepository;
import io.github.fossure.service.MailCustomService;
import io.github.fossure.service.UserCustomService;
import io.github.fossure.web.rest.AccountResource;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

/**
 * Custom REST controller for managing the current user's account
 * where changes are inserted that are different from the base class generated by the JHipster generator.<br>
 * API base path: {@code /api/v1}
 */
@RestController
@RequestMapping("/api/v1")
public class AccountCustomResource extends AccountResource {

    private static final Logger log = LoggerFactory.getLogger(AccountCustomResource.class);

    @Value("${application.mail.allowed-domain}")
    private String allowedDomain;

    private final UserCustomService userCustomService;

    private final MailCustomService mailService;

    public AccountCustomResource(
        UserCustomRepository userRepository,
        UserCustomService userService,
        MailCustomService mailService,
        UserCustomService userCustomService
    ) {
        super(userRepository, userService, mailService);
        this.mailService = mailService;
        this.userCustomService = userCustomService;
    }

    /**
     * {@code POST  /register} : register the user.
     *
     * @param managedUserVM the managed user View Model.
     * @throws InvalidPasswordException  {@code 400 (Bad Request)} if the password is incorrect.
     * @throws EmailAlreadyUsedException {@code 400 (Bad Request)} if the email is already used.
     * @throws LoginAlreadyUsedException {@code 400 (Bad Request)} if the login is already used.
     */
    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    public void registerAccount(@Valid @RequestBody ManagedUserVM managedUserVM) {
        log.debug("REST request to register a user");

        if (isPasswordLengthInvalid(managedUserVM.getPassword())) {
            throw new InvalidPasswordException();
        }

        if (userCustomService.isEmailDomainInvalid(managedUserVM.getEmail())) {
            throw new BadRequestAlertException("Only a \"" + allowedDomain + "\" email address is allowed!", "user", "emaildomaininvalid");
        }

        User user = userCustomService.registerUser(managedUserVM, managedUserVM.getPassword());
        mailService.sendActivationEmail(user);
    }

    private static boolean isPasswordLengthInvalid(String password) {
        return (
            StringUtils.isEmpty(password) ||
            password.length() < ManagedUserVM.PASSWORD_MIN_LENGTH ||
            password.length() > ManagedUserVM.PASSWORD_MAX_LENGTH
        );
    }
}
